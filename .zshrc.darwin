# .zshrc

########################################
# General

# Compile .zshrc automatically
if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
    zcompile ~/.zshrc
fi

# 色を使用出来るようにする
autoload -Uz colors
colors

# emacs 風キーバインドにする
bindkey -e

# VCSの設定
autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
zstyle ':vcs_info:*' formats "%F{green}%c%u[%b]%f"
zstyle ':vcs_info:*' actionformats '[%b|%a]'
precmd () { vcs_info }

# プロンプト
# %B...%b     : %Bと%bの間を太字にする
# %F{color}%f : %Fと%fの間の文字ををcolorにする
# %K{color}%k : %Kと%kの間の背景色をcolorにする
# %C          : カレントディレクトリ
# %~          : カレントディクトリ(ホームディレクトリ以下全て表示)
# %n          : ユーザー名
# %m          : ホスト名
local p_dir="%F{yellow}[%n@%~]%f"
local p_mark="%B%(?,%F{green},%F{red})%(!,#,>)%f%b"
# 1行表示
PROMPT="$p_dir $p_mark "
RPROMPT=$RPROMPT'${vcs_info_msg_0_}'
# 2行表示
#PROMPT="$p_dir\n$p_mark "

# 単語の区切り文字を指定する
autoload -Uz select-word-style
select-word-style default
# ここで指定した文字は単語区切りとみなされる
# / も区切りと扱うので、^W でディレクトリ１つ分を削除できる
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified

# iTermのTabBarにカレントディレクトリのパスを表示する
eval 'echo -ne "\033]0;`basename \`realpath .\``\007"'

########################################
# 補完

# 補完機能を有効にする
autoload -Uz compinit
compinit

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# ../ の後は今いるディレクトリを補完しない
zstyle ':completion:*' ignore-parents parent pwd ..

# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
                   /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'

########################################
# オプション

# 日本語ファイル名を表示可能にする
setopt print_eight_bit

# beep を無効にする
setopt no_beep

# フローコントロールを無効にする
setopt no_flow_control

# Ctrl+Dでzshを終了しない
setopt ignore_eof

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ディレクトリ名だけでcdする
setopt auto_cd

# cd したら自動的にpushdする
setopt auto_pushd

# 重複したディレクトリを追加しない
setopt pushd_ignore_dups

# 同時に起動したzshの間でヒストリを共有する
setopt share_history

# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups

# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space

# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks

# 高機能なワイルドカード展開を使用する
setopt extended_glob

# Disable Loading Global Profiles
setopt no_global_rcs


########################################
# キーバインド

# ^R で履歴検索をするときに * でワイルドカードを使用出来るようにする
bindkey '^R' history-incremental-pattern-search-backward


########################################
# エイリアス

# sudo の後のコマンドでエイリアスを有効にする
alias sudo='sudo '

alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'
# alias rm='rm -i'
alias rm='rmtrash'
alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -p'

# GNU commands
alias grep='ggrep --color=always'
alias ls='gls --color=always'
alias sed='gsed'

# Editor
EMACS_PATH="/usr/local/bin/emacs"
alias e='$EMACS_PATH -nw'
alias ee='$EMACS_PATH'
alias v='/usr/bin/vim'
#alias vsc='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'

# tmux
alias tk='tmux kill-session'

# bat instead of cat
alias cat='bat'

# git
alias gs='git status'
alias gp='git push'
alias gl='git log'
alias ga='git add'
alias gc='git commit'
alias gch='git checkout'
alias gd='git diff'
alias gdc='git diff --cached'
alias gb='git branch'
alias gr='git restore'
alias gbrm='git branch --merged | egrep -v "\*|develop|master" | xargs git branch -d'

# docker
alias d='docker'
alias dp='docker ps'
alias dpa='docker ps -a'
alias dimg='docker image'
alias dc='docker container'

# Xcode
alias rmderived='\rm -rf ~/Library/Developer/Xcode/DerivedData/*'
# グローバルエイリアス
alias -g L='| less'
alias -g G='| grep --color=always'
alias -g C='| pbcopy'


########################################
# function

# cdの後にlsを実行
chpwd() { ls -a }

#fgとbgを完全に無視したC-p
#https://qiita.com/aosho235/items/83e338989b901b99fe35
_up-line-or-history-ignoring() {
    zle up-line-or-history
    case "$BUFFER" in
        fg|bg)
            zle up-line-or-history
            ;;
    esac
}
zle -N _up-line-or-history-ignoring
bindkey '^P' _up-line-or-history-ignoring

#同様にfgとbgを完全に無視したC-n
_down-line-or-history-ignoring() {
    zle down-line-or-history
    case "$BUFFER" in
        fg|bg)
            zle down-line-or-history
            ;;
    esac
}
zle -N _down-line-or-history-ignoring
bindkey '^N' _down-line-or-history-ignoring

# コマンド履歴でpecoる
# https://qiita.com/tmsanrinsha/items/72cebab6cd448704e366
_peco-select-history() {
    # historyを番号なし、逆順、最初から表示。
    # 順番を保持して重複を削除。
    # カーソルの左側の文字列をクエリにしてpecoを起動
    # \nを改行に変換
    BUFFER="$(history -nr 1 | awk '!a[$0]++' | peco --query "$LBUFFER" | sed 's/\\n/\n/')"
    CURSOR=$#BUFFER             # カーソルを文末に移動
    zle -R -c                   # refresh
}
zle -N _peco-select-history
bindkey '^R' _peco-select-history

# manコマンドに色をつける
man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;36m") \
        LESS_TERMCAP_md=$(printf "\e[1;36m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

#############################################
# Additional settings

# Powerline
# powerline-daemon -q
# source $HOME/.local/lib/python3.6/site-packages/powerline/bindings/zsh/powerline.zsh

# Welcome Messageは/etc/motdに書く

